#!/usr/bin/python3.8
from datetime import datetime
from decimal import Decimal
import decimal
from json import dumps
from math import trunc
from os import getenv
from sys import argv

categories= ["–í–∫—É—Å–Ω—è—à–∫–∏", "–î–æ–ª–≥", "–î–æ—Ä–æ–≥–∞", "–î–æ—Ä–æ–≥–∞ –¥–∞–ª—å–Ω—è—è", "–î—Ä—É–≥–æ–µ", "–ó–∞—Ä–∞–±–æ—Ç–Ω–∞—è –ø–ª–∞—Ç–∞ –°—Ç–∏–ø–µ–Ω–¥–∏—è –ü–æ—Å–æ–±–∏—è –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã–ø–ª–∞—Ç—ã", "–ó–¥–æ—Ä–æ–≤—å–µ", "–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏", "–ö–∞–Ω—Ü—Ç–æ–≤–∞—Ä—ã", "–ö–æ–º–º—É–Ω–∞–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏", "–ö–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è", "–ü–æ–¥–∞—Ä–æ–∫", "–ü—Ä–æ–¥—É–∫—Ç—ã", "–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è", "–°—Ç–æ–ª–æ–≤–∞—è –∏ –∫–∞—Ñ–µ –∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã", "–£—á—ë—Ç", "–•–æ–∑—è–π—Å—Ç–≤–æ"]

currencies = ["‚ÇΩ", "‚Ç¨", "Aurum", "MTSS", "RU000A101CY8", "LNTA", "YNDX", "NASDAQ: ATVI"]

typeo_all = ["–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å (–ò–ü)", "–û–±—â–µ—Å—Ç–≤–æ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–π –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å—é (–û–û–û)", "–ê–∫—Ü–∏–æ–Ω–µ—Ä–Ω–æ–µ –æ–±—â–µ—Å—Ç–≤–æ (–ê–û)", "–ù–µ–∫–æ–º–º–µ—Ä—á–µ—Å–∫–∞—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è (–ù–ö–û)", "–û–±–æ—Å–æ–±–ª–µ–Ω–Ω–æ–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ (–û–ü)", "–¢–æ–≤–∞—Ä–∏—â–µ—Å—Ç–≤–æ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫–æ–≤ –∂–∏–ª—å—è (–¢–°–ñ)", "–§–∏–∑–∏—á–µ—Å–∫–æ–µ –ª–∏—Ü–æ (–§–õ)"]

class Counterparty:
	@property
	def location(self) -> str:
		return self._location
	
	@location.setter
	def location(self, location: str):
		if type(location) != str:
			raise ValueError(f"–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å ¬´{location}¬ª ({type(location)}).")
		self._location = location
	
	def location_io(self):
		self.location = input("–í–≤–µ–¥–∏—Ç–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (–∞–¥—Ä–µ—Å):\nüìç ")
		print(f"–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: ¬´{self.location}¬ª")
	
	@property
	def typeo(self) -> str:
		return self._typeo
	
	@typeo.setter
	def typeo(self, typeo: str):
		if typeo not in typeo_all:
			raise ValueError(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å ¬´{typeo}¬ª ({type(typeo)}), –æ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ–¥–Ω–∞ –∏–∑: {typeo_all}")
		self._typeo = typeo
	
	def typeo_io(self):
		message = "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–∏–ø–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏:\n" + "\n".join([f"{index}: {typeo}" for index, typeo in enumerate(typeo_all)]) + "\nüêù "
		user_index = input(message)
		try:
			index = int(user_index)
		except ValueError as e: # if index is not int
			#if user_index not in typeo_all:
				#print(f"–í–Ω–∏–º–∞–Ω–∏–µ, –≤—ã–±—Ä–∞–Ω —Ç–∏–ø –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ ¬´{user_index}¬ª (–Ω–µ —á–∏—Å–ª–æ –∏ –Ω–µ—Ç —Å—Ä–µ–¥–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö)")
			self.typeo = user_index
		else:
			self.typeo = typeo_all[index]
		print(f"–¢–∏–ø –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏: ¬´{self.typeo}¬ª")
	
	@property
	def name(self) -> str:
		return self._name
	
	@name.setter
	def name(self, name: str):
		if type(name) != str:
			raise ValueError(f"–ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π. ¬´{name}¬ª ({type(name)})")
		if name == "":
			raise ValueError(f"–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
		self._name = name
	
	def name_io(self):
		self.name = input("–ù–∞–∑–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –∏–ª–∏ –ò–û–§ —á–µ–ª–æ–≤–µ–∫–∞ –µ—Å–ª–∏ –§–õ:\nüï¥ ")
		print(f"–ò–º—è –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞: ¬´{self.name}¬ª")
	
	@classmethod
	def io(cls) -> "Counterparty":
		output = cls()
		print("–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞.")
		output.location_io()
		output.typeo_io()
		output.name_io()
		print(f"–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç: {output}")
		return output
	
	def as_dict(self) -> dict:
		return {"location": self.location, "typeo": self.typeo, "name": self.name}
	
	def __str__(self):
		return dumps(self.as_dict(), ensure_ascii=False)

currency_names = ["‚ÇΩ", "‚Ç¨", "Aurum", "MTSS", "RU000A101CY8", "LNTA", "YNDX", "NASDAQ: ATVI"]

class Product:
	def __init__(self):
		self._name = ""
		self._price = Decimal(0)
		self._count = Decimal(0)
		self._actual_sum = Decimal(0)
		self._category = None
	
	@property
	def name(self) -> str:
		return self._name
	
	@name.setter
	def name(self, name: str):
		if not name:
			raise ValueError(f"–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ ¬´{name}¬ª –ø—É—Å—Ç–æ–µ.")
		self._name = name
	
	def name_io(self):
		self.name = input("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞:\nüïØ ")
		print(f"–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞: ¬´{self.name}¬ª")
	
	@property
	def category(self) -> str:
		return self._category
	
	@category.setter
	def category(self, category: str):
		if category not in categories:
			raise ValueError("–ö–∞—Ç–µ–≥–æ—Ä–∏—è ¬´{category}¬ª –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫.")
		self._category = category
	
	def category_io(self):
		message = "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:\n" + "\n".join([f"{index}: {category}" for index, category in enumerate(categories)]) + "\nüö§ "
		while True:
			user_index = input(message)
			try:
				index = int(user_index)
			except ValueError:
				print(f"–ù–æ–º–µ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ¬´{index}¬ª –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞ –æ—à–∏–±–∫–∏ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥.")
				continue
			try:
				self.category = categories[index]
			except ValueError:
				print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞ –æ—à–∏–±–∫–∏ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥ –Ω–æ–º–µ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.")
				continue
			break
		print(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: ¬´{self.category}¬ª")
	
	@property
	def price(self) -> Decimal:
		return self._price
	
	@price.setter
	def price(self, price: str):
		try:
			self._price = Decimal(price)
		except decimal.InvalidOperation as e:
			raise ValueError(f"–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å. –ü—Ä–∏–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —á–∏—Å–ª–∞: ¬´{Decimal('3.14')}¬ª") from e
	
	def price_io(self):
		self.price = input(f"–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ–¥–Ω–æ–π –µ–¥–∏–Ω–∏—Ü—ã —Ç–æ–≤–∞—Ä–∞ (—Å–∫–æ–ª—å–∫–æ —Ä—É–±–ª–µ–π –∑–∞ –æ–¥–Ω—É —É–ø–∞–∫–æ–≤–∫—É, –∫–∏–ª–ª–æ–≥—Ä–∞–º–º, –ª–∏—Ç—Ä –∏ —Ç–∞–∫ –¥–∞–ª–µ–µ‚Ä¶). –ü—Ä–∏–º–µ—Ä: ¬´{Decimal('99.99')}¬ª\nüîß ")
		print(f"–¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞: {self.price}")
	
	@property
	def count(self):
		return self._count
	
	@count.setter
	def count(self, count: str):
		try:
			self._count = Decimal(count)
		except decimal.InvalidOperation as e:
			raise ValueError(f"–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ. –ü—Ä–∏–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —á–∏—Å–ª–∞: ¬´{Decimal('3.14')}¬ª") from e
	
	def count_io(self):
		self.count = input(f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (—Å–∫–æ–ª—å–∫–æ —É–ø–∞–∫–æ–≤–æ–∫, –∫–∏–ª–æ–≥—Ä–∞–º–º, –≥—Ä–∞–º–º, –ª–∏—Ç—Ä–æ–≤) –∫—É–ø–ª–µ–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞. –ü—Ä–∏–º–µ—Ä: ¬´{Decimal('8')}¬ª\nüî® ")
		print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ¬´{self.count}¬ª")
	
	@property
	def actual_sum(self):
		return self._actual_sum
	
	@actual_sum.setter
	def actual_sum(self, actual_sum: str):
		try:
			self._actual_sum = Decimal(actual_sum)
		except decimal.InvalidOperation as e:
			raise ValueError(f"–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ü–µ–Ω—É –ø–æ–∑–∏—Ü–∏–∏ –≤ —á–µ–∫–µ. –ü—Ä–∏–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —á–∏—Å–ª–∞: ¬´{Decimal('25.12')}¬ª") from e
	
	def actual_sum_io(self):
		self.actual_sum = input(f"–í–≤–µ–¥–∏—Ç–µ, —Å–∫–æ–ª—å–∫–æ —Ä—É–±–ª–µ–π –≤—ã—à–ª–æ –∑–∞ —Ç–æ–≤–∞—Ä. –°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –æ—Ç–≤–µ—Ç ¬´{Decimal(trunc((self.price * self.count) * 100))/100}¬ª, –æ–¥–Ω–∞–∫–æ —ç—Ç–æ –Ω–µ –≤—Å–µ–≥–¥–∞ —Ç–∞–∫. –ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –Ω–∞ —á–µ–∫–µ –∏ –∑–∞–ø–∏—à–∏—Ç–µ –æ—Ç–≤–µ—Ç:\nüõ† ")
		print(f"–°—É–º–º–∞ –ø–æ–∑–∏—Ü–∏–∏: ¬´{self.actual_sum}¬ª")
	
	@classmethod
	def io(cls):
		output = cls()
		output.name_io()
		output.category_io()
		output.price_io()
		output.count_io()
		output.actual_sum_io()
		print(f"–ü—Ä–æ–¥—É–∫—Ç: ¬´{output}¬ª")
		return output
	
	def as_dict(self) -> dict:
		return {
			"name": self.name,
			"category": self.category,
			"price": self.price,
			"count": self.count,
			"actual_sum": self.actual_sum
		}
	
	def __str__(self) -> str:
		return dumps(self.as_dict(), default=str, ensure_ascii=False)

datetime_input_formats = ["%d.%m.%Y %H:%M:%S", "%d.%m.%Y %H:%M"]
datetime_output_format = "%d.%m.%Y %H:%M:%S"

class Check:
	def __init__(self):
		self._date = None
		self._products = list()
		self._counterparty = None
		self._currency = None
		self._actual_sum = Decimal(0)
	
	@property
	def date(self) -> str:
		return self._date
	
	@date.setter
	def date(self, date: str):
		ex = None
		_date = None
		for format in datetime_input_formats:
			try:
				_date = datetime.strptime(date, format)
			except Exception as e:
				ex = e
		if _date is None:
			raise ex
		self._date = date
	
	def date_io(self):
		self.date = input(f"–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É. –ü—Ä–∏–º–µ—Ä —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π –¥–∞—Ç—ã: ¬´{datetime.now().strftime(datetime_input_formats[0])}¬ª:\nüóì")
	
	@property
	def counterparty(self) -> Counterparty:
		return self._counterparty
	
	@counterparty.setter
	def counterparty(self, counterparty: Counterparty):
		self._counterparty = counterparty
	
	def counterparty_io(self):
		while True:
			try:
				self.counterparty = Counterparty.io()
			except ValueError as e:
				i = input(f"–í —Ö–æ–¥–µ –æ—à–∏–±–∫–∏ –Ω–µ—É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞. –•–æ—Ç–∏—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å? (¬´–¥–∞¬ª –¥–ª—è –ø–æ–≤—Ç–æ—Ä–∞)\n–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏: {e}\n–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {self}")
				if i.lower() == "–¥–∞":
					continue
			break
	
	@property
	def products(self) -> list:
		return [product for product in self._products]
	
	def products_add(self, product: Product):
		return self._products.append(product)
	
	def calculate_actual_sum(self) -> Decimal:
		return sum([product.actual_sum for product in self.products])
	
	def products_add_io(self):
		product = None
		while True:
			try:
				product = Product.io()
			except ValueError as e:
				i = input(f"–í –Ω–µ—É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–æ–∑–∏—Ü–∏—é –≤ —Ö–æ–¥–µ –æ—à–∏–±–∫–∏ ¬´{e}¬ª. –•–æ—Ç–∏—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å? (¬´–¥–∞¬ª –¥–ª—è –ø–æ–≤—Ç–æ—Ä–∞)\n–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏: {e}\n–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {self}")
				if i.lower() == "–¥–∞":
					continue
			break
		if product is None:
			print("–û—Ç–º–µ–Ω–µ–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏")
		else:
			self.products_add(product)
			print(f"–î–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–∑–∏—Ü–∏—è –∏–ª–∏ –ø—Ä–æ–¥—É–∫—Ç: {product}.")
			print(f"–°–ø–∏—Å–æ–∫ –ø–æ–∑–∏—Ü–∏–π: " + str([product.name for product in self.products]))
			print("–°—É–º–º–∞ –ø–æ–∑–∏—Ü–∏–π: " + str(self.calculate_actual_sum()))
	
	def products_add_all_io(self):
		while True:
			i = input("–î–æ–±–∞–≤–∏—Ç—å" + (" –µ—â—ë –æ–¥–∏–Ω" if self._products else "") + " —Ç–æ–≤–∞—Ä? ¬´–¥–∞¬ª –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è.\nüß∫ ")
			if i.lower() != "–¥–∞":
				break
			self.products_add_io()
	
	@property
	def currency(self) -> str:
		return self._currency
	
	@currency.setter
	def currency(self, currency: str):
		if currency not in currencies:
			raise ValueError("–í–∞–ª—é—Ç–∞ ¬´{currency}¬ª –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫.")
		self._currency = currency
	
	def currency_io(self):
		message = "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞–ª—é—Ç—ã:\n" + "\n".join([f"{index}: {currency}" for index, currency in enumerate(currencies)]) + "\nüí± "
		while True:
			user_index = input(message)
			try:
				index = int(user_index)
			except ValueError:
				print(f"–ù–æ–º–µ—Ä –≤–∞–ª—é—Ç—ã ¬´{index}¬ª –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞ –æ—à–∏–±–∫–∏ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥.")
				continue
			try:
				self.currency = currencies[index]
			except ValueError:
				print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞ –æ—à–∏–±–∫–∏ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥ –Ω–æ–º–µ—Ä–∞ –≤–∞–ª—é—Ç—ã.")
				continue
			break
		print(f"–í–∞–ª—é—Ç–∞: ¬´{self.currency}¬ª")
	
	@property
	def actual_sum(self):
		return self._actual_sum
	
	@actual_sum.setter
	def actual_sum(self, actual_sum: str):
		try:
			self._actual_sum = Decimal(actual_sum)
		except decimal.InvalidOperation as e:
			raise ValueError(f"–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Å—É–º–º–∞—Ä–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å. –ü—Ä–∏–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —á–∏—Å–ª–∞: ¬´{Decimal('11')}¬ª") from e
	
	def actual_sum_io(self):
		self.actual_sum = input(f"–°—É–º–º–∞ —á–µ–∫–∞. –°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –æ—Ç–≤–µ—Ç ¬´{Decimal(trunc(self.calculate_actual_sum() * 100))/100}¬ª, –æ–¥–Ω–∞–∫–æ —ç—Ç–æ –Ω–µ –≤—Å–µ–≥–¥–∞ —Ç–∞–∫. –ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –Ω–∞ —á–µ–∫–µ –∏ –∑–∞–ø–∏—à–∏—Ç–µ –æ—Ç–≤–µ—Ç:\nüßÆ ")
		print(f"–°—É–º–º–∞ —á–µ–∫–∞: ¬´{self.actual_sum}¬ª")
	
	@classmethod
	def io(cls):
		output = cls()
		functions = [output.counterparty_io, output.date_io, output.currency_io, output.products_add_all_io, output.actual_sum_io]
		i = 0
		while i < len(functions):
			try:
				functions[i]()
			except Exception as e:
				print(output)
				yes = input(f"–í —Ö–æ–¥–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è ¬´{functions[i]}¬ª –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ ¬´{e}¬ª. –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å. –ù–∞–ø–∏—à–∏—Ç–µ ¬´–¥–∞¬ª —á—Ç–æ–±—ã –ø–æ–≤—Ç–æ—Ä–∏—Ç—å.")
				if yes == "–¥–∞":
					continue
				else:
					raise ValueError("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–µ—à–∏–ª –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ.") from e
			i += 1
		return output
	
	def as_dict(self) -> dict:
		return {
			"date": self.date,
			"products": [product.as_dict() for product in self.products],
			"counterparty": self.counterparty.as_dict() if self.counterparty is not None else None,
			"currency": self.currency,
			"actual_sum": self.actual_sum
		}
	
	def __str__(self) -> str:
		return dumps(self.as_dict(), ensure_ascii=False, default=str)


def main():
	identificator = f"{argv[0]}." if len(argv) >= 1 else '';
	result = Check.io()
	print(dumps(result.as_dict(), indent=1, ensure_ascii=False, default=str))
	l = input("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å? –ù–∞–ø–∏—à–∏—Ç–µ ¬´–¥–∞¬ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è\nüíæ ")
	if l.lower() == "–¥–∞":
		with open(os.getenv("OUTPUT_FOLDER", "./data/") + identificator + "json.log", "a") as f:
			f.write(str(result) + "\n")
		print("–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ.")
	else:
		print("–û—Ç–º–µ–Ω–µ–Ω–æ.")
	print("–í—ã—Ö–æ–¥.")

if __name__ == "__main__":
	main()
